控制反转  IoC
	反转了依赖关系的满足方式，由之前的自己创建依赖对象，变为由工厂推送。（变主动为被动，即反转）
	解决了具有依赖关系的组建之间的耦合，使得项目形态更加稳健
	
依赖注入  DI
	1、Set注入
	2、构造注入
	3、自动注入
	
spring工厂特性
	饿汉式创建优势（仅针对单例）：
		工厂创建之后，会将spring配置文件中的所有对象都创建完成。
		提高程序运行效率，避免多次IO，减少对象创建时间
	生命周期方法：
		自定义初始化方法：添加“init-method”属性，Spring则会在创建对象之后调用此方法
		自定义销毁方法：添加“destroy-method”属性，Spring则会在创建对象之前调用此方法
		销毁：工厂的close()房啊发被调用之后，spring回会到已创建的单例对象
		分类：Singleton对象由Spring容器销毁、Prototype对象由JVM销毁
	生命周期
		单例bean   singleton
			随工厂启动  创建 ==》 构造方法 ==》  set方法 （注入值） ==》 init（初始化） ==》 构建完成 ==》 随工厂关闭   销毁
		多例bean   prototype
			被使用时      创建 ==》 构造方法 ==》  set方法 （注入值） ==》 init（初始化） ==》 构建完成 ==》 JVM垃圾回收   销毁
		多例bean不会随工厂启动而启动，也不会随工厂关闭而关闭
	生命周期注解
